{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pt\\\\Desktop\\\\React Projects\\\\coding challenge\\\\src\\\\Components\\\\Label.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport { useEffect, useState } from \"react\";\nimport Map from './Map';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"First_Error\":\n      return state = false;\n\n    default:\n      return state;\n  }\n};\n\nfunction Label() {\n  _s();\n\n  const [error, setError] = useReducer(reducer, true);\n  const [name, setNames] = useState([]);\n  const [mapAddress, setMapAddress] = useState(\"\");\n\n  const setAddress = e => {\n    if (e) {\n      const n = name.filter(na => {\n        if (na.id == e) {\n          return na.id;\n        }\n      });\n      setMapAddress(n[0].address);\n    } else {\n      setMapAddress(\"\");\n    }\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const response = await fetch(`https://jsonplaceholder.typicode.com/users`);\n        const data = await response.json();\n        setNames(data);\n        setError({\n          type: \"First_Error\"\n        });\n      } catch (e) {\n        console.log(e.message);\n        setNames([]);\n      }\n    };\n\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"labels\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"name\",\n      className: \"labels-title\",\n      children: \"Select a  User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"names\",\n      onChange: e => setAddress(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"none\",\n        children: \"Please Select \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), name.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item.id,\n          children: item.name\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 22\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"labels-loading\",\n      children: \"Loading....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 19\n    }, this), !error && /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Show Address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 1\n  }, this);\n}\n\n_s(Label, \"wnCcbUAZbmlv/yDjAIZ0yRyIVMc=\");\n\n_c = Label;\nexport default Label;\n\nvar _c;\n\n$RefreshReg$(_c, \"Label\");","map":{"version":3,"sources":["C:/Users/pt/Desktop/React Projects/coding challenge/src/Components/Label.jsx"],"names":["React","useReducer","useEffect","useState","Map","reducer","state","action","type","Label","error","setError","name","setNames","mapAddress","setMapAddress","setAddress","e","n","filter","na","id","address","getData","response","fetch","data","json","console","log","message","target","value","map","item"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAAQC,SAAR,EAAkBC,QAAlB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,OAAhB;;;AAEA,MAAMC,OAAO,GAAC,CAACC,KAAD,EAAOC,MAAP,KAAgB;AAC7B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,aAAL;AACI,aAAOF,KAAK,GAAC,KAAb;;AACJ;AACA,aAAOA,KAAP;AAJJ;AAMA,CAPD;;AAQA,SAASG,KAAT,GAAiB;AAAA;;AACjB,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAiBV,UAAU,CAACI,OAAD,EAAS,IAAT,CAAjC;AACC,QAAM,CAACO,IAAD,EAAMC,QAAN,IAAgBV,QAAQ,CAAC,EAAD,CAA9B;AACD,QAAM,CAACW,UAAD,EAAYC,aAAZ,IAA2BZ,QAAQ,CAAC,EAAD,CAAzC;;AACA,QAAMa,UAAU,GAAEC,CAAD,IAAK;AAClB,QAAGA,CAAH,EAAK;AACG,YAAMC,CAAC,GAACN,IAAI,CAACO,MAAL,CAAaC,EAAD,IAAM;AACrB,YAAGA,EAAE,CAACC,EAAH,IAAOJ,CAAV,EAAY;AACL,iBAAOG,EAAE,CAACC,EAAV;AACH;AACJ,OAJG,CAAR;AAKIN,MAAAA,aAAa,CAACG,CAAC,CAAC,CAAD,CAAD,CAAKI,OAAN,CAAb;AACH,KAPT,MAQY;AACAP,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH;AACZ,GAZD;;AAcAb,EAAAA,SAAS,CAAC,MAAI;AACd,UAAMqB,OAAO,GAAC,YAAS;AACnB,UAAG;AACH,cAAMC,QAAQ,GAAC,MAAMC,KAAK,CAAE,4CAAF,CAA1B;AACA,cAAMC,IAAI,GAAC,MAAMF,QAAQ,CAACG,IAAT,EAAjB;AACAd,QAAAA,QAAQ,CAACa,IAAD,CAAR;AACCf,QAAAA,QAAQ,CAAC;AAACH,UAAAA,IAAI,EAAC;AAAN,SAAD,CAAR;AACA,OALD,CAMA,OAAMS,CAAN,EAAQ;AACJW,QAAAA,OAAO,CAACC,GAAR,CAAYZ,CAAC,CAACa,OAAd;AACAjB,QAAAA,QAAQ,CAAC,EAAD,CAAR;AAEH;AACJ,KAZD;;AAcAU,IAAAA,OAAO;AACN,GAhBQ,EAgBP,EAhBO,CAAT;AAiBE,sBAGF;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,4BACI;AAAO,MAAA,OAAO,EAAC,MAAf;AAAsB,MAAA,SAAS,EAAC,cAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,EAAE,EAAC,OAAX;AAAmB,MAAA,QAAQ,EAAGN,CAAD,IAAKD,UAAU,CAACC,CAAC,CAACc,MAAF,CAASC,KAAV,CAA5C;AAAA,8BACI;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEMpB,IAAI,CAACqB,GAAL,CAAUC,IAAD,IAAQ;AACd,4BAAQ;AAAQ,UAAA,KAAK,EAAEA,IAAI,CAACb,EAApB;AAAA,oBAAuCa,IAAI,CAACtB;AAA5C,WAA6BsB,IAAI,CAACb,EAAlC;AAAA;AAAA;AAAA;AAAA,gBAAR;AACA,OAFH,CAFN;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAoBSX,KAAK,iBAAI;AAAG,MAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YApBlB,EAqBS,CAACA,KAAD,iBAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YArBnB;AAAA;AAAA;AAAA;AAAA;AAAA,UAHE;AA+BD;;GAlEQD,K;;KAAAA,K;AAoET,eAAeA,KAAf","sourcesContent":["import React, { useReducer } from 'react'\r\nimport {useEffect,useState} from \"react\" ;\r\nimport Map from './Map';\r\n\r\nconst reducer=(state,action)=>{\r\n switch(action.type){\r\n     case \"First_Error\":\r\n         return state=false;\r\n     default:\r\n     return state;\r\n }\r\n}\r\nfunction Label() {\r\nconst [error,setError]=useReducer(reducer,true);\r\n const [name,setNames]=useState([]);\r\nconst [mapAddress,setMapAddress]=useState(\"\");\r\nconst setAddress=(e)=>{\r\n    if(e){\r\n            const n=name.filter((na)=>{\r\n                 if(na.id==e){\r\n                        return na.id;\r\n                    }\r\n                })\r\n                setMapAddress(n[0].address);\r\n            }\r\n            else{\r\n                setMapAddress(\"\");\r\n            }\r\n}\r\n\r\nuseEffect(()=>{\r\nconst getData=async()=>{\r\n    try{\r\n    const response=await fetch(`https://jsonplaceholder.typicode.com/users`);\r\n    const data=await response.json();\r\n    setNames(data);\r\n     setError({type:\"First_Error\"});\r\n    }\r\n    catch(e){\r\n        console.log(e.message);\r\n        setNames([]);\r\n        \r\n    }\r\n}\r\n\r\ngetData();\r\n},[])\r\n  return (\r\n     \r\n\r\n<div className='labels'>\r\n    <label htmlFor=\"name\" className='labels-title'>Select a  User</label>\r\n    <select id=\"names\" onChange={(e)=>setAddress(e.target.value)}>\r\n        <option value=\"none\" >Please Select </option> \r\n         {name.map((item)=>{\r\n             return  <option value={item.id} key={item.id}>{item.name}</option> \r\n            })\r\n        }\r\n        \r\n    \r\n        \r\n        \r\n        \r\n        \r\n    \r\n    \r\n    \r\n    \r\n  \r\n        </select>\r\n        {error && <p className='labels-loading'>Loading....</p>}\r\n        {!error && <button>Show Address</button>}\r\n       {/* <Map mapAddress={mapAddress} error={error}></Map> */}\r\n    </div>\r\n  \r\n   \r\n  )\r\n  \r\n}\r\n\r\nexport default Label"]},"metadata":{},"sourceType":"module"}