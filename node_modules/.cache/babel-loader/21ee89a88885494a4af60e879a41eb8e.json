{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pt\\\\Desktop\\\\React Projects\\\\coding challenge\\\\src\\\\Components\\\\Label.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from \"react\";\nimport Map from './Map';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Label() {\n  _s();\n\n  const [error, setError] = useState(true);\n  const [errorBtn, setErrorBtn] = useState(true);\n  const [name, setNames] = useState([]);\n  const [map, showMap] = useState(false);\n  const [id, setId] = useState(\"\");\n  const [mapAddress, setMapAddress] = useState(\"\");\n\n  const setAddress = () => {\n    if (id) {\n      const n = name.filter(na => {\n        if (na.id == id) {\n          return na.id;\n        }\n      });\n      setMapAddress(n[0].address);\n      showMap(true);\n      setError(false);\n    } else {\n      setMapAddress(\"\");\n    }\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const response = await fetch(`https://jsonplaceholder.typicode.com/users`);\n        const data = await response.json();\n        setNames(data);\n        setAddress();\n        setErrorBtn(true);\n      } catch (e) {\n        console.log(e.message);\n        setNames([]);\n      }\n    };\n\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"labels\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"name\",\n      className: \"labels-title\",\n      children: \"Select a  User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"names\",\n      onChange: e => setId(e.target.value),\n      children: [name.length > 1 && /*#__PURE__*/_jsxDEV(\"option\", {\n        defaultValue: \"none\",\n        children: \"Please Select a User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }, this), name.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item.id,\n          children: item.name\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 22\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"labels-loading\",\n      children: [errorBtn ? \"Loading\" : \"please select a user\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 19\n    }, this), !errorBtn && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setAddress(),\n      className: \"showMapBtn\",\n      children: \"Show Address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 23\n    }, this), map && /*#__PURE__*/_jsxDEV(Map, {\n      mapAddress: mapAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 1\n  }, this);\n}\n\n_s(Label, \"54BMl7traHZ2hCaEjWMbJ0OIaXE=\");\n\n_c = Label;\nexport default Label;\n\nvar _c;\n\n$RefreshReg$(_c, \"Label\");","map":{"version":3,"sources":["C:/Users/pt/Desktop/React Projects/coding challenge/src/Components/Label.jsx"],"names":["React","useEffect","useState","Map","Label","error","setError","errorBtn","setErrorBtn","name","setNames","map","showMap","id","setId","mapAddress","setMapAddress","setAddress","n","filter","na","address","getData","response","fetch","data","json","e","console","log","message","target","value","length","item"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {useEffect,useState} from \"react\" ;\r\nimport Map from './Map';\r\n\r\nfunction Label() {\r\nconst [error,setError]=useState(true);\r\nconst [errorBtn,setErrorBtn]=useState(true);\r\n const [name,setNames]=useState([]);\r\n const [map,showMap]=useState(false);\r\n const [id,setId]=useState(\"\");\r\nconst [mapAddress,setMapAddress]=useState(\"\");\r\nconst setAddress=()=>{\r\n\r\n    if(id){\r\n  \r\n        const n=name.filter((na)=>{\r\n            if(na.id==id){\r\n                return na.id;\r\n            }\r\n        })\r\n        setMapAddress(n[0].address);\r\n        showMap(true);\r\n        setError(false);\r\n            }\r\n            else{\r\n                setMapAddress(\"\");\r\n            }\r\n}\r\n\r\nuseEffect(()=>{\r\nconst getData=async()=>{\r\n    try{\r\n    const response=await fetch(`https://jsonplaceholder.typicode.com/users`);\r\n    const data=await response.json();\r\n    setNames(data);\r\n    setAddress();\r\n    setErrorBtn(true);\r\n    }\r\n    catch(e){\r\n        console.log(e.message);\r\n        setNames([]);\r\n        \r\n    }\r\n}\r\n\r\ngetData();\r\n},[])\r\n  return (\r\n     \r\n\r\n<div className='labels'>\r\n    <label htmlFor=\"name\" className='labels-title'>Select a  User</label>\r\n    <select id=\"names\"  onChange={(e)=>setId(e.target.value)}>\r\n      {name.length>1 && <option  defaultValue={\"none\"} >Please Select a User</option> }\r\n         {name.map((item)=>{\r\n             return  <option value={item.id} key={item.id}>{item.name}</option> \r\n            })\r\n        }\r\n        \r\n    \r\n        \r\n        \r\n        \r\n        \r\n    \r\n    \r\n    \r\n    \r\n  \r\n        </select>\r\n        {error && <p className='labels-loading'>{errorBtn?\"Loading\":\"please select a user\"} </p>}\r\n        {!errorBtn && <button onClick={()=>setAddress()} className=\"showMapBtn\">Show Address</button>}\r\n       {map && <Map mapAddress={mapAddress}></Map>}\r\n    </div>\r\n  \r\n   \r\n  )\r\n  \r\n}\r\n\r\nexport default Label"]},"metadata":{},"sourceType":"module"}